		Aptiv CVC BSP


1. About this document
======================
This document describes the common and non-hardware specific information.
Please refer to README.hardware for hardware specific information.

Dependencies
------------
This layer depends on the following layers supplied with Wind River Linux:
	oe-core
	wrlinux
	nxp-s32g

Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.

Building the aptiv-s32g layer
---------------------------
This layer should be added to bblayers.conf. This is done automatically
when using the Wind River setup.sh wrapper.

Note:

To build wrlinux for CVC FL board, use:

	--machines aptiv-cvc-131

License
-------
Copyright (C) 2022 Wind River Systems, Inc.

Source code included in the tree for individual recipes is under the LICENSE
stated in the associated recipe (.bb file) unless otherwise stated.

The metadata is under the following license unless otherwise stated.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

2. BSP Kernel and Distros
=========================

The following table summarizes the valid Wind River Linux distros for this BSP.
'Y' in each content cell stands for supported; 'N' stands for not supported:

  +--------------+-------------+------------------+-------------------+--------------+
  | valid/distro |   wrlinux   | wrlinux-graphics | wrlinux-installer | wrlinux-tiny |
  +--------------+-------------+------------------+-------------------+--------------+
  |    valid     |      Y      |        N         |         N         |       N      |
  +--------------+-------------+------------------+-------------------+--------------+

For the supported kernel type for this BSP, please check the TARGET_SUPPORTED_KTYPES
by running 'bitbake -e virtual/kernel | grep "^TARGET_SUPPORTED_KTYPES="'.

Note: The preempt-rt ktype is available for this BSP/Machine at this time.


3. Board Specific Patches
=========================

To get a list of patches applied to the kernel specific to this BSP along with
patch descriptions use git-whatchanged on the default kernel. For example:

	%> cd tmp-glibc/work-shared/<bsp_name>/kernel-source
	%> git whatchanged <kernel_version>/standard/base..<kernel_version>/standard/<bsp_name>


4. Boot Instructions
====================

The typical u-boot settings apply to these boards. You will need to use
setenv, printenv and saveenv, to configure, display and store respectively
your network configuration details and kernel command line. In order to
TFTP a kernel, you need at a minimum to set the following:

	- ipaddr
	- gatewayip
	- netmask
	- serverip
	- loadaddr
	- dtbfile
	- dtbaddr
	- ethaddr
	- eth1addr

Your board may ship with the values for the MAC address of
the Ethernet interfaces set to the defaults compiled into the
u-boot image.  You should set the ethaddr, eth1addr and so on
as per the manufacturer assigned values, usually indicated with
a sticker on the board.

Target specifics are usually set in the "bootargs" variable, and the
kernel image is set in the "bootfile" variable. Don't forget that if you
want these values to be available after a power cycle you will need to run
the saveenv command.

Typically convenience macros exist that will create a complete bootargs
command line for the kernel based on variables that contain individual
settings.  Since these macros exist as env variables themselves, they
may or may not be present depending on who installed and configured
u-boot for the board.

The console device for the board is ttyLF0 at 115200 baud. For the DTB
address, 0x8FE00000  was used with success by Wind River. The load address
must be high enough to not interfere with kernel decompression. A value
of 0x8A080000 was used with success for all kernels tested by Wind River.

4.1 NFS Root File System
------------------------

Example settings for the monitor (u-boot) are shown below:

nfsboot=setenv bootargs root=/dev/nfs rw nfsroot=$serverip:$rootpath \
ip=$ipaddr:$serverip:$gatewayip:$netmask:$hostname:$netdev:off \
console=$consoledev,$baudrate $othbootargs;tftp $loadaddr $bootfile; \
tftp $fdtaddr $fdtfile;booti $loadaddr - $fdtaddr
ethaddr=00:04:9F:02:00:FD
eth1addr=00:04:9F:02:01:FD
eth2addr=00:04:9F:02:02:FD
loadaddr=0x8EE00000
fdtaddr=0x80000000
gatewayip=192.168.1.1
netmask=255.255.255.0
ipaddr=192.168.1.100
serverip=192.168.1.2
netdev=eth0
bootfile=Image
fdtfile=s32g399a-cvc-fl.dtb
rootpath=/tftpboot/rootfs
consoledev=ttyLF0
baudrate=115200

NOTE: Because pfe is an out-of-tree module, it can't be considered as a net device
to boot a NFS rootfs. A USB Ethernet adapter is an alternative option.

5. Creating Partitioned Images(WIC)
===================================

User can use the OpenEmbedded Image Creator, wic, to create the properly
partitioned image on a SD card. The wic command
generates partitioned images from existing OpenEmbedded build artifacts.
User can refer to the below URL to get more WIC details:

https://docs.yoctoproject.org/singleindex.html#creating-partitioned-images-using-wic

This BSP supports disk images for SD card.
After build the project, user will get a WIC image under the directory
tmp-glibc/deploy/images/aptiv-cvc-131/ ,such as:

tmp-glibc/deploy/images/aptiv-cvc-131/wrlinux-image-<rootfs_type>-aptiv-cvc-131.wic

Then user can write the output image to a SD card:

5.1 Burn images to SD card
--------------------------

To burn WIC image to SD card, user only need to execute the below command:

# dd if=wrlinux-image-std-aptiv-cvc-131.wic of=/dev/your_sd_dev

5.2 Set uboot env
-----------------

Board can boot automatically by set the below uboot environment variables:

=> setenv bootfile Image; setenv fdtfile s32g399a-cvc-fl.dtb; setenv loadaddr 0x8EE00000; setenv fdtaddr 0x80000000;

=> setenv bootargs console=ttyLF0,115200n8 root=/dev/mmcblk0p2 rw

=> setenv bootcmd 'fatload mmc 0:1 $loadaddr $bootfile; fatload mmc 0:1 $fdtaddr $fdtfile; booti $loadaddr - $fdtaddr'

=> saveenv; run bootcmd;

6. Features
===========

6.1 FLEXCAN
-----------

About the detailed description, please refer to the section "6.1 FLEXCAN" of README
in layers/nxp-s32g.

6.2 ATF
-------

About the detailed description, please refer to the section "6.5 ATF" of README
in layers/nxp-s32g.

NOTE: STR(Sleep To Ram) is not supported for Aptiv FL board.

6.3 Build U-Boot
----------------

About the detailed description, please refer to the section "6.7 Build U-Boot" of README
in layers/nxp-s32g.

6.4 IPCF
--------

About the detailed description, please refer to the section "6.6 IPCF" of README
in layers/nxp-s32g.

6.5 Secure boot
---------------

About the detailed description, please refer to the README in layers/nxp-s32g/s32g-secure-boot.

6.5.1 Specific Boot Steps For Aptiv
-----------------------------------

Aptiv board has its own load address, so user should use below configuration name and load address
to replace the corresponding ones in section 3.4 of
layers/nxp-s32g/s32g-secure-boot/README

configuration Name: conf-freescale_s32g399a-cvc-fl.dtb
Load Address of fitImage: 0x8A080000

Detailed steps as below:
	# fatload mmc 0:1 0x8A080000 fitImage
	# run mmcargs
	# bootm 0x8A080000#conf-freescale_s32g399a-cvc-fl.dtb

6.6 PFE
-------

The NXP PFE (Packet Forwarding Engine) offloads the processing of Ethernet packets
from the host cores, yielding higher performance and lower power than pure software
processing can achieve.

PFE is a component of S32G399A SOC. It must be installed with the firmware to use.
PFE firmware is not shipped with SDK, customers have to contact NXP to get permission
and download the PFE firmware.

6.6.1 PFE firmware
------------------

About the detailed description, please refer to the section "6.3.1 PFE firmware" of README
in layers/nxp-s32g.

6.6.2 PFE Master
------------------

1. Add the "pfe" package to the system through including the
following line in your local.conf:

    # Set firmware dir
    PFE_LOCAL_FIRMWARE_DIR = "<The firmwares fully directory path, eg: lib/firmware/>"

    # Install pfe in rootfs
    IMAGE_INSTALL:append = " pfe"

    # Install pfe in initramfs, this is required when initramfs is used,
    # for example, when feature/ostree is enabled.
    PACKAGE_INSTALL:append = " pfe"

    The variable PFE_LOCAL_FIRMWARE_DIR indicates the location where can
    get the firmwares s32g_pfe_class.fw and s32g_pfe_util.fw.
    And after setting the above variables, the firmwares can be installed
    into WIC image's first boot partition automatically when build WIC image.

2. Built and install them:

	# bitbake wrlinux-image-<small/std>

3. Boot CVC FL board and stop in U-Boot, make sure that the U-Boot environment
variable "fdt_file" is set to be "s32g399a-cvc-fl.dtb" in which the pfe0~2 is
in master mode, and make sure that pfeng_mode is enabled.

	U-Boot=>setenv fdt_file 's32g399a-cvc-fl.dtb'

Furthermore, pfe0 and pfe2 are connected with the RTL9010 PHYs and these PHYs need
to be configured by the following commands to ensure that pfe0 and pfe2 work under
both U-boot and Linux:

       U-Boot=>mdio write pfeng-mdio-0 1 1b 0xCC04; mdio write pfeng-mdio-0 1 1c 0x7180;
       U-Boot=>mdio write pfeng-mdio-2 1 1b 0xCC04; mdio write pfeng-mdio-2 1 1c 0x7180;

And if using pfe0~2 in U-Boot, please set the U-Boot environment variable "ethact" to
be "pfe0" or "pfe1" or "pfe2":

       U-Boot=>setenv ethact 'pfe0'

4. After entering WRLinux, the pfe0~2 interfaces can be observed.

6.6.3 PFE Slave
---------------

NOTE: The PFE slave mode is not verified at FL board.

6.7 Aptiv m7-autosar boot
-------------------------

There is a Aptiv specific m7-autosar image(cvc_s32g3_m7_app.bin) for Aptiv platform.
If users want to integrate it into WRLinux product, it needs to setup WRLinux
project with below template.

	--templates feature/aptiv-autosar-boot

Because of the license limitation, and the Aptiv repo is not public.
Common users need to get the m7-autosar and HSE firmware images by themselves,
and then copy images into their local directory.
In addition, the m7 and hse recipes are from Aptiv, and they are almost unmodified
so that they can be used smoothly on Aptiv own project.
Because of the above reasons, add below content into local.conf in order to use m7-autosar
and hse images normally.

	FILESEXTRAPATHS:prepend := "<m7 autosar image path>:"
	BASEURI:pn-m7 = "file:"
	ARTIFACTORYPV:pn-m7 = ""
	M7_IMAGE:pn-m7 = "cvc_s32g3_m7_app.bin"
	MD5SUM:pn-m7 = "688de4507ca304a859bf7d202e139c5e"

	FILESEXTRAPATHS:prepend := "<hse image path>:"
	BASEURI:pn-hse = "file:/"
	HSE_IMAGE:pn-hse = "rev1.0_s32g3xx_hse_fw_0.20.0_2.16.1_pb221011.bin.pink"
	PV:pn-hse = "221011"
	MD5SUM:pn-hse = "ce6eb31784a0f41be03bf8cf9a61207c"

Because aptiv m7 autosar boot feature uses m7, hse, dcd and ivt non opensource recipes, it also
needs to add below content in local.conf.

	CUSTOMER_RECIPES:wr-aptiv-s32g += 'm7'
	CUSTOMER_RECIPES:wr-aptiv-s32g += 'hse'
	CUSTOMER_RECIPES:wr-aptiv-s32g += 'dcd'
	CUSTOMER_RECIPES:wr-aptiv-s32g += 'ivt'

After above preparation, users can start to build project, and the final wic file is generated
in <project-path>/build/tmp-glibc/deploy/images/<machine name>/ directory. Regarding how to install
the wic file, please refer to section 5.1.

Note: The set of configurations in local.conf is only an example, please modify them according to
      your own file name, version and md5 of the 2 images.

6.8 dm-verity
-------------

About the detailed description, please refer to the section "6.9 dm-verity" of README in layers/nxp-s32g.

6.9 cpu thermal
----------------

About the detailed description, please refer to the section "6.10 cpu thermal" of README in layers/nxp-s32g.
